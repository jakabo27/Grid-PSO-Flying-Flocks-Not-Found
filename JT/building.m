classdef building
    properties
        building_name
        ep          %Energy Plus
        noH         %Number of Homes (?)
        logTable
        P_ess
        ac_state_hist
        Phvac_hist
        T_in_hist
        T_des_lower
        T_des_upper
        heating_set_points
        cooling_set_points
        time
        %any other variable required for your optimization
    end
    methods
        function obj = building(building_name,P_ess1,ts,T_des_lower1, T_des_upper1, heating_set_points1, cooling_set_points1)
            noH = 24
            obj.building_name = building_name;
            obj.P_ess = P_ess1;
            obj.ac_state_hist = zeros(ts,noH);
            obj.Phvac_hist = zeros(ts,noH);
            obj.T_in_hist = zeros(ts,noH);
            obj.T_des_lower = T_des_lower1;
            obj.T_des_upper = T_des_upper1;
            obj.heating_set_points = heating_set_points1; 
            obj.cooling_set_points = cooling_set_points1;
            obj.time = 60;
            obj.ep = mlep;
            if isfile(['Building_model1min' num2str(building_name) '.idf'])==0
                copyfile('Building_model1min.idf', ['Building_model1min' num2str(building_name) '.idf'])
                copyfile('USA_SC_Anderson.County.AP.723125_TMY3.epw', ['USA_SC_Anderson.County.AP.723125_TMY3_' num2str(building_name) '.epw'])
            end
            obj.ep.idfFile = ['Building_model1min' num2str(building_name)]; 
            obj.ep.epwFile = ['USA_SC_Anderson.County.AP.723125_TMY3_' num2str(building_name)];
            obj.ep.initialize;
            obj.logTable = table('Size',[0, 1 + obj.ep.nOut],...
            'VariableTypes',repmat({'double'},1,1 + obj.ep.nOut),...
            'VariableNames',[{'Time'}; obj.ep.outputSigName]);
            obj.noH = 24;
            obj.ep.start;
            
            u = [obj.heating_set_points; obj.cooling_set_points; ones(1,obj.noH); zeros(1,obj.noH)];
            
            obj.ep.write(u(:),obj.time);    % Send EnergyPlus inputs
            [y,obj.time] = obj.ep.read;     % Get EnergyPlus outputs 
            y = y(:);
           
                        
            obj.ac_state_hist(obj.time/60 + 1,:) = ones(1,obj.noH);
            obj.T_in_hist(obj.time/60 + 1,:) = y(1:3:72,1)';
            obj.Phvac_hist(obj.time/60 + 1,:) = (y(2:3:72,1)' + y(3:3:72,1)');

        end
        function output = run(obj,controls)
            %heating_set_points : lowest temperature before heater is operated ( 1 X noH )
            %cooling_set_points : highest temperature before heater is operated ( 1 X noH )
            %controls           : HVAC on/ off decisions ( 1 X noH )
            %heat_load          : heat generated by other loads (calculate using P_ess) ( 1 X noH )
            heat_load = [0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1];
            
            thisTime = obj.time/60;
            thisPrevTime = thisTime - 1;
            if (thisTime) < 1
                thisTime = 1;
                thisPrevTime = 1;
            end
            if (thisTime-1) < 1  %For t=0 or 1
                thisPrevTime = 1;
            end
            
            u = [obj.heating_set_points; obj.cooling_set_points; controls; heat_load/5000];
            obj.ep.write(u(:),obj.time);    % Send EnergyPlus inputs
            [y,thisTime] = obj.ep.read;     % Get EnergyPlus outputs 
            y = y(:);
            obj.ac_state_hist(thisTime,:) = controls;
            obj.T_in_hist(thisTime,:) = y(1:3:72,1)';
            obj.Phvac_hist(thisTime,:) = (y(2:3:72,1)' + y(3:3:72,1)').*obj.ac_state_hist(thisTime,:) +...
                     obj.Phvac_hist(thisPrevTime,:) .*(1-obj.ac_state_hist(thisTime,:));
            fprintf("Hey I ran!!");
        end
        function fitness_value = fitness(obj, temp_controls, target)
            %Implement your objective function(s) here.
            %You may use large cost coefficients for the constraints implementation.
            %eg:- you can apply a large cost to the fitness value when
            %target (aggregator) is not met.
            %Use object properties to calculate fitness value. Define
            %additional properties as needes.
            
        end
        function output = optimize(obj,target)
            %Implement your building optimization 
            %Define BPSO parameters: 
            %   noP - number of particles
            %   Max_iteration - maximum number of iterations
            %Output is the value sent to the aggregator. Aggregator obtain
            %it by calling this method.
            noP = 100;
            Max_iteration = 1000;
            [controls,~, ~]= BPSO(obj, noP, Max_iteration,target);
            output = obj.run(obj, controls);
        end
    end    
end
